Created and made the navbar black.
Did the migration thing with the /admin page and changed the text on it.    

        ***Templates inheritance***
- created a file base.html
- copied all the context of index.html into it. (earlier html part and the navbar component of the bootstrap)
- added title and body blocks to the base.html
- extended the index.html page with the base.html. added the tile and body block content to it.
- did the same with about, contacts and services.
- modify the views.py file with the render function.

  *** List template ***
- go to bootstrap home page -> doc->components -> list group ->costum content. Copy the code.
- in index.html, in body block add a div container. Inside it add the paste the template code. 
- give margin with my-5 to the div container.
- the first one is in blue color which will be the heading of the list.
- The rest will be the questions of the list inside anchor <a>.
- Change the text accordingly and add the hyperlink of the page you want it to forward to.
- make container-fluid to extend it to the whole page.


    *** working on the database ***
    *creating form in contacts.html*

- go to doc->form->layout->choose the second form. 
- create a div container in contacts.html and paste the form. 
- in the form<> add method = 'post' and type the action to be for /contacts 
- in mail, type='text', name='email', id='email', placeholder='type your email.'
- in one of the class division use textarea and row = 3.
- csrf token is used so that the data isn't sent by the user in any unethical way. It helps in receiving a new form every time of submission.
- After this the submitted response will go to the contacts() in views now.

- created a class contacts in models.py for the fields created above.
class Contacts(models.Model):
    email=models.CharField(max_length=122)
    password=models.models.CharField(max_length=122)
    name=models.CharField(max_length=12)
    desc=models.models.TextField()
    date=models.models.DateField()
- updated the contacts function in views.py
def contacts(request):
    if request.method == "POST":
        name = request.POST.get('name')
        email = request.POST.get('email')
        phone = request.POST.get('phone')
        desc = request.POST.get('desc')
        contact = Contacts(name = name, email = email, phone = phone, desc = desc, date = datetime.today())
        contact.save()
    return render(request, 'contacts.html')
- for our table to be detected there are two things we'll need to do:
    1. Register the table(class created) in admin.py
    2. Add the name of the app(with the directory) in the settings.py file from home/apps.py file. e.g home.apps.HomeConfig
- try detecting migrations with makemigrations.
- now the changes made in the files have been recorded in one file.
- to create table out of this information we need to run the migrate command.
- now every entry we fill in the form is being saved in the database and can be checked by /admin page.
- if we want our entries to appear with the person's name who filled it we'll have to add one more function to the class we created:
class Contacts(models.Model):
    email=models.CharField(max_length=122)
    phone=models.CharField(max_length=122)
    name=models.CharField(max_length=12)
    desc=models.TextField()
    date=models.DateField()

    def __str__(self):
        return self.name

- in /admin you can update or add new entries.

      **sql queries from shell**
- from home.models import Contacts
- Contacts.objects.all()
- Contacts.objects.all()[0]
- Contacts.objects.all().first()
- Contacts.objects.all().last()

- Contacts.objects.filter(name='amit', phone='23423')
- Contacts.objects.filter(name='amit')[0]
- Contacts.objects.filter(name='amit')[0].email
- update:
  inst = Contacts.objects.filter(name='amit')[0]
  inst.phone = '999999'
  inst.save()

1/11/21
   **** Authentication ****         ------------------------->>>>>>>>>>>> look for JWT authentication
- starting with userproject
- created app: python manage.py startapp home
- imported include in url.py, ('', include(home.urls), name='any')
- copied url.py files to /home/urls.py and removed the admin line.
- imported views from home and added ('', home.views, name="any")
- in view imported httpsresponse and render and created index functio returning httpsresponse("index page").email
- added our apps name in settings.py (home.apps.HomeConfig)
- created static and templates foler.
- go to setting -> link before the static dir -> get code and paste it below it.
STATICFILES_DIRS = [
    BASE_DIR / "static",
    '/var/www/static/',
]
- copy the middle line and add in the templates dir.
        'DIRS': [BASE_DIR / "templates",],
- python makemigrations.
- python migrate
- created index.html file in templates and modified the index() with render().
<!DOCTYPE html> 
    <html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>welcome to the UserApp!</title>
    </head>
    <body>
        This is the body of User App
    </body>
    </html>


- created a super user with admin name and password redhat
- logged in in /admin
- created new user from there with name rahul and passwd redhat@123

- copied the login page template from bootstrap's exmaples into login.html. Copy the modifications from harry's source code
- <form class="form-signin" method="post" action="/login">
- changed email to username, type='username'. changed password name="password".email
- in views.login => return render(request, 'login.html')

**How to authenticate**
- google: django auth ->homepage ->working with user objects
- for authentication see the "Authenticating users" section.    


13 Nov
**** BACK AT HOSTEL ****
- For just testing. Replaced the '' in urls.py/hello with '/home'. Now at 127.0.0.1:8000/home will be directed to the home app. 
- Nothing changed in urls.py
- in base.html, the href links were replaced with /home/contacts... etc.


*** creating new app: problems ***
- This part can be tricky if seen after long time.
- Till now we were working on home app. All the requests were being directed to home app. ( all the '' requests).
- Later it was changed to '/home'.
- Now to manage the problem pages we created a new app separately for better management.
- in hello.urls.py created a new path direction of all the '/problems' requests . 
- in probems.urls.py created a path that will take the '/problems/problem1' requests to views.problem1 function.
- created a function problem1 in views.py that would render the problem1.html template from the template folder.
- the problem1.html template inherited the navbar from base.html and has a title and a body that says "this is body of problem1".   

problem1.html modified 
- After extending navbar from base.html and adding the title, create a div with class='container'. 
- Copy the kadane problem from gfg.
- create heading using h1 for 'Problem 1'. 
- Copy and past the problems in proper format using paragraphs and break lines and bold texts.
- Added a submit button in last that was copied from the sign in page that was made using the login page.

14 Nov
- added "" route to the hello/urls.py so now all the home, contacts, services pages can be accessed from '/' directly. However, after
clicking on the web page options you will be directed to the urls with /home/ only.
- 

- in the form, added the enctype='multipart/form-data' and action='/problem1' can also be avoided
- in views.py in the added:
def problem1(request):
    if(request.method == "POST"):
        uploaded_file = request.FILES['userfile']
        print(uploaded_file.name)
        print(uploaded_file.size)
        uploaded_file.read()
    return render(request, 'problem1.html')
- now the file can be uploaded and its name can be viewed in the debuggin terminal.

15 Nov
serving media files:
- saving the uploaded files in our servers in called serving media files.
- django is not a good framework for serving media files so apache or enginx is used for this purpose along with this. But for development 
purpose we're using only django. It is recommended not to use this in production.
- add 2 variables MEDIA_ROOT and MEDIA_URL in the settings.py. In Media root is the directory path that will store the file and media url 
will show the file in the browser with this url path.
MEDIA_ROOT = "D:/Algo university/Online judge/Online-judge/django/hello/media/"
MEDIA_URL = '/media/'
- additionally we have to add one more thing to the hello/urls.py to serve the media files(only for development or debuggin mode):
#   from django.conf import settings
    from django.conf.urls.static import static
    if settings.DEBUG:
        urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

Handling uploaded files:
from django.core.files.storage import FileSystemStorage
        fs = FileSystemStorage()
        fs.save(uploaded_file.name, uploaded_file)

- now the files can be uploaded to the hello/media folder and can be accessed using the /localhosts/media/filename.ext 
